// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/proto/v1/service.proto

package v1

import (
	context "context"
	rpc "github.com/vadicheck/shorturl/internal/proto/v1/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortURL_Shorten_FullMethodName       = "/internal.proto.v1.ShortURL/Shorten"
	ShortURL_Batch_FullMethodName         = "/internal.proto.v1.ShortURL/Batch"
	ShortURL_Delete_FullMethodName        = "/internal.proto.v1.ShortURL/Delete"
	ShortURL_GetURL_FullMethodName        = "/internal.proto.v1.ShortURL/GetURL"
	ShortURL_GetURLs_FullMethodName       = "/internal.proto.v1.ShortURL/GetURLs"
	ShortURL_Ping_FullMethodName          = "/internal.proto.v1.ShortURL/Ping"
	ShortURL_InternalStats_FullMethodName = "/internal.proto.v1.ShortURL/InternalStats"
)

// ShortURLClient is the client API for ShortURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortURLClient interface {
	Shorten(ctx context.Context, in *rpc.ShortenRequest, opts ...grpc.CallOption) (*rpc.ShortenResponse, error)
	Batch(ctx context.Context, in *rpc.BatchRequest, opts ...grpc.CallOption) (*rpc.BatchResponse, error)
	Delete(ctx context.Context, in *rpc.DeleteRequest, opts ...grpc.CallOption) (*rpc.DeleteResponse, error)
	GetURL(ctx context.Context, in *rpc.GetUrlRequest, opts ...grpc.CallOption) (*rpc.GetUrlResponse, error)
	GetURLs(ctx context.Context, in *rpc.GetUrlsRequest, opts ...grpc.CallOption) (*rpc.GetUrlsResponse, error)
	Ping(ctx context.Context, in *rpc.PingRequest, opts ...grpc.CallOption) (*rpc.PingResponse, error)
	InternalStats(ctx context.Context, in *rpc.StatRequest, opts ...grpc.CallOption) (*rpc.StatResponse, error)
}

type shortURLClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLClient(cc grpc.ClientConnInterface) ShortURLClient {
	return &shortURLClient{cc}
}

func (c *shortURLClient) Shorten(ctx context.Context, in *rpc.ShortenRequest, opts ...grpc.CallOption) (*rpc.ShortenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.ShortenResponse)
	err := c.cc.Invoke(ctx, ShortURL_Shorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) Batch(ctx context.Context, in *rpc.BatchRequest, opts ...grpc.CallOption) (*rpc.BatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.BatchResponse)
	err := c.cc.Invoke(ctx, ShortURL_Batch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) Delete(ctx context.Context, in *rpc.DeleteRequest, opts ...grpc.CallOption) (*rpc.DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.DeleteResponse)
	err := c.cc.Invoke(ctx, ShortURL_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) GetURL(ctx context.Context, in *rpc.GetUrlRequest, opts ...grpc.CallOption) (*rpc.GetUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.GetUrlResponse)
	err := c.cc.Invoke(ctx, ShortURL_GetURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) GetURLs(ctx context.Context, in *rpc.GetUrlsRequest, opts ...grpc.CallOption) (*rpc.GetUrlsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.GetUrlsResponse)
	err := c.cc.Invoke(ctx, ShortURL_GetURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) Ping(ctx context.Context, in *rpc.PingRequest, opts ...grpc.CallOption) (*rpc.PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.PingResponse)
	err := c.cc.Invoke(ctx, ShortURL_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLClient) InternalStats(ctx context.Context, in *rpc.StatRequest, opts ...grpc.CallOption) (*rpc.StatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(rpc.StatResponse)
	err := c.cc.Invoke(ctx, ShortURL_InternalStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLServer is the server API for ShortURL service.
// All implementations must embed UnimplementedShortURLServer
// for forward compatibility.
type ShortURLServer interface {
	Shorten(context.Context, *rpc.ShortenRequest) (*rpc.ShortenResponse, error)
	Batch(context.Context, *rpc.BatchRequest) (*rpc.BatchResponse, error)
	Delete(context.Context, *rpc.DeleteRequest) (*rpc.DeleteResponse, error)
	GetURL(context.Context, *rpc.GetUrlRequest) (*rpc.GetUrlResponse, error)
	GetURLs(context.Context, *rpc.GetUrlsRequest) (*rpc.GetUrlsResponse, error)
	Ping(context.Context, *rpc.PingRequest) (*rpc.PingResponse, error)
	InternalStats(context.Context, *rpc.StatRequest) (*rpc.StatResponse, error)
	mustEmbedUnimplementedShortURLServer()
}

// UnimplementedShortURLServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortURLServer struct{}

func (UnimplementedShortURLServer) Shorten(context.Context, *rpc.ShortenRequest) (*rpc.ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedShortURLServer) Batch(context.Context, *rpc.BatchRequest) (*rpc.BatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedShortURLServer) Delete(context.Context, *rpc.DeleteRequest) (*rpc.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedShortURLServer) GetURL(context.Context, *rpc.GetUrlRequest) (*rpc.GetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedShortURLServer) GetURLs(context.Context, *rpc.GetUrlsRequest) (*rpc.GetUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLs not implemented")
}
func (UnimplementedShortURLServer) Ping(context.Context, *rpc.PingRequest) (*rpc.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortURLServer) InternalStats(context.Context, *rpc.StatRequest) (*rpc.StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalStats not implemented")
}
func (UnimplementedShortURLServer) mustEmbedUnimplementedShortURLServer() {}
func (UnimplementedShortURLServer) testEmbeddedByValue()                  {}

// UnsafeShortURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLServer will
// result in compilation errors.
type UnsafeShortURLServer interface {
	mustEmbedUnimplementedShortURLServer()
}

func RegisterShortURLServer(s grpc.ServiceRegistrar, srv ShortURLServer) {
	// If the following call pancis, it indicates UnimplementedShortURLServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortURL_ServiceDesc, srv)
}

func _ShortURL_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_Shorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Shorten(ctx, req.(*rpc.ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_Batch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Batch(ctx, req.(*rpc.BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Delete(ctx, req.(*rpc.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).GetURL(ctx, req.(*rpc.GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_GetURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.GetUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).GetURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_GetURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).GetURLs(ctx, req.(*rpc.GetUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).Ping(ctx, req.(*rpc.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURL_InternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLServer).InternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURL_InternalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLServer).InternalStats(ctx, req.(*rpc.StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURL_ServiceDesc is the grpc.ServiceDesc for ShortURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.proto.v1.ShortURL",
	HandlerType: (*ShortURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shorten",
			Handler:    _ShortURL_Shorten_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _ShortURL_Batch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShortURL_Delete_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _ShortURL_GetURL_Handler,
		},
		{
			MethodName: "GetURLs",
			Handler:    _ShortURL_GetURLs_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortURL_Ping_Handler,
		},
		{
			MethodName: "InternalStats",
			Handler:    _ShortURL_InternalStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/service.proto",
}
